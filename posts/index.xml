<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Option::None</title>
    <link>http://blog.cro.sh/posts/</link>
    <description>Recent content in Posts on Option::None</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <copyright>&amp;copy; 2019-2021 Nam Junghyun</copyright>
    <lastBuildDate>Sun, 20 Feb 2022 21:25:34 +0900</lastBuildDate><atom:link href="http://blog.cro.sh/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows에서 Rust 빌드 환경 컨테이너화하기</title>
      <link>http://blog.cro.sh/posts/dockerizing-windows-rust-build-environment/</link>
      <pubDate>Sun, 20 Feb 2022 21:25:34 +0900</pubDate>
      
      <guid>http://blog.cro.sh/posts/dockerizing-windows-rust-build-environment/</guid>
      <description>&lt;p&gt;CD 등을 위해 Rust 빌드 환경을 &lt;a href=&#34;https://hub.docker.com/_/rust&#34;&gt;Docker Hub의 공식 Rust 이미지&lt;/a&gt;를
기반으로 하여 자주 구성하는데, 공식 이미지는 Linux 컨테이너만 지원하기 때문에 Windows 기반의
빌드 환경을 샌드박싱하기 어려웠다. 이번 포스트에서는 Windows Docker Image 기반으로 Rust 빌드
환경을 구성하는 법을 다룰 것이다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>파이로 파이 Pico 디버깅하기 (w/ buildroot)</title>
      <link>http://blog.cro.sh/posts/debugging-raspberry-pi-pico-with-raspberry-pi-3/</link>
      <pubDate>Sun, 19 Dec 2021 11:32:19 +0900</pubDate>
      
      <guid>http://blog.cro.sh/posts/debugging-raspberry-pi-pico-with-raspberry-pi-3/</guid>
      <description>&lt;p&gt;라즈베리 파이 재단이 출시한 4$ MCU인 Pico를 구입했다. 하드웨어 디버깅을 하기에 마땅한 장비가 없어서,
가지고 있던 라즈베리 파이 3을 이용해보기로 했다. 최대한 미니멀한 환경을 원했기 때문에 예전과 같이
Buildroot을 사용하여 구성하였다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloudflare Workers Rust SDK 사용기</title>
      <link>http://blog.cro.sh/posts/cloudflare-workers-rust/</link>
      <pubDate>Mon, 04 Oct 2021 19:16:56 +0900</pubDate>
      
      <guid>http://blog.cro.sh/posts/cloudflare-workers-rust/</guid>
      <description>&lt;p&gt;Workers는 Cloudflare사의 서버리스 컴퓨팅 서비스로, 전세계의 수많은 Cloudflare Edge 네트워크를
통해 빠른 반응속도로 응답할 수 있는 매력적인 서비스다. Workers 코드를 Rust로 작성해보면서 느낀 점을
공유해보고자 한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CS6265 Epilogue</title>
      <link>http://blog.cro.sh/posts/cs6265-epilogue/</link>
      <pubDate>Sun, 14 Feb 2021 16:44:32 +0900</pubDate>
      
      <guid>http://blog.cro.sh/posts/cs6265-epilogue/</guid>
      <description>&lt;p&gt;동계 디지털 국제 계절수업 프로그램을 통해 조지아 공대의
&lt;a href=&#34;https://omscs.gatech.edu/cs-6265-information-security-lab&#34;&gt;Information Security Lab (CS6265)&lt;/a&gt;
수업을 들어볼 수 있었다. 겨울방학 동한 공부한 컴퓨터 보안에 대해 정리해보고자 한다.
당연히 이 글을 읽는 누군가는 이 수업을 들을 수도 있기 때문에, 스포일러는 최대한 자제할 것이다. 무엇을 배웠는지 위주로 정리한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows에서 Rust ARM64 타겟으로 크로스컴파일하기</title>
      <link>http://blog.cro.sh/posts/rust-crosscompile-aarch64/</link>
      <pubDate>Sat, 04 Apr 2020 21:50:17 +0900</pubDate>
      
      <guid>http://blog.cro.sh/posts/rust-crosscompile-aarch64/</guid>
      <description>&lt;p&gt;링크 위주로 간략하게 정리한다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wasm 모듈 HTML에 내장하기</title>
      <link>http://blog.cro.sh/posts/embedding-wasm-in-html/</link>
      <pubDate>Sun, 23 Feb 2020 17:57:08 +0900</pubDate>
      
      <guid>http://blog.cro.sh/posts/embedding-wasm-in-html/</guid>
      <description>&lt;p&gt;레지스트리를 암호화해 저장하는 프로그램인 &lt;a href=&#34;https://github.com/cr0sh/zandam&#34;&gt;Zandam&lt;/a&gt;을 개발하면서, &amp;lsquo;Self-extractor를 Wasm과 HTML로 작성하면 크로스플랫폼 지원이 매우 간단하지 않을까&amp;rsquo; 라는 생각을 해 보았다. 그런데 사용자 입장에서 여러 개의 파일(JS module, Wasm module, HTML 등)을 들고 다니면 매우 번거롭기 때문에, 이들을 하나의 HTML 파일로 우겨넣는 방법을 찾아야 했다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raspberry Pi Zero-W에 Buildroot 설치하기 (1)</title>
      <link>http://blog.cro.sh/posts/pi-zero-buildroot/</link>
      <pubDate>Sun, 01 Dec 2019 19:19:27 +0900</pubDate>
      
      <guid>http://blog.cro.sh/posts/pi-zero-buildroot/</guid>
      <description>&lt;p&gt;라즈베리 파이 제로-W를 산 지 1년이 다 되어가는데도, 쓸 데가 딱히 없어 서랍장 한구석에 박아 두고 있었다.
그러다가 &lt;a href=&#34;https://github.com/cr0sh/lzn&#34;&gt;lzn&lt;/a&gt;(현재 private)을 개발하면서 &amp;lsquo;이걸 파이에 박아놓고 휴대용 웹툰 서버 머신으로 쓰면 어떨까&amp;rsquo; 하는 생각이 들었다.
보조배터리 꽂아서 쓸 건데 굳이 전력 아깝게(?) 다른 프로그램 돌아가는 건 싫었고, 임베디드 리눅스도 공부할 겸 &lt;a href=&#34;https://buildroot.org&#34;&gt;Buildroot&lt;/a&gt;으로 리눅스를 빌드해서 올려보는 작업에 도전했다. 모니터 없이(headless) 동작하는 리눅스 머신 셋업 과정을 여기에 정리하고 공유한다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
